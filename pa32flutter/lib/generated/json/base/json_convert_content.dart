// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:pa32/http/bean/care_givers_detail_entity.dart';
import 'package:pa32/generated/json/care_givers_detail_entity.g.dart';
import 'package:pa32/http/bean/cares_customer_detail_entity.dart';
import 'package:pa32/generated/json/cares_customer_detail_entity.g.dart';
import 'package:pa32/http/bean/cares_customer_givers_entity.dart';
import 'package:pa32/generated/json/cares_customer_givers_entity.g.dart';
import 'package:pa32/http/bean/cares_customer_list_entity.dart';
import 'package:pa32/generated/json/cares_customer_list_entity.g.dart';
import 'package:pa32/http/bean/cares_swiper_entity.dart';
import 'package:pa32/generated/json/cares_swiper_entity.g.dart';
import 'package:pa32/http/bean/country_code_entity.dart';
import 'package:pa32/generated/json/country_code_entity.g.dart';
import 'package:pa32/http/bean/customer_alerts_detail_entity.dart';
import 'package:pa32/generated/json/customer_alerts_detail_entity.g.dart';
import 'package:pa32/http/bean/customer_alerts_entity.dart';
import 'package:pa32/generated/json/customer_alerts_entity.g.dart';
import 'package:pa32/http/bean/customer_detail_entity.dart';
import 'package:pa32/generated/json/customer_detail_entity.g.dart';
import 'package:pa32/http/bean/customer_info_detail_entity.dart';
import 'package:pa32/generated/json/customer_info_detail_entity.g.dart';
import 'package:pa32/http/bean/customer_list_all_entity.dart';
import 'package:pa32/generated/json/customer_list_all_entity.g.dart';
import 'package:pa32/http/bean/customer_list_entity.dart';
import 'package:pa32/generated/json/customer_list_entity.g.dart';
import 'package:pa32/http/bean/login_entity.dart';
import 'package:pa32/generated/json/login_entity.g.dart';
import 'package:pa32/http/bean/my_cares_customer_detail_entity.dart';
import 'package:pa32/generated/json/my_cares_customer_detail_entity.g.dart';
import 'package:pa32/http/bean/my_emergency_call_entity.dart';
import 'package:pa32/generated/json/my_emergency_call_entity.g.dart';
import 'package:pa32/http/bean/my_user_entity.dart';
import 'package:pa32/generated/json/my_user_entity.g.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {
  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  }

  //Go back to a single instance by type
  static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
    final String type = M.toString();
    if (type == (CareGiversDetailEntity).toString()) {
      return CareGiversDetailEntity.fromJson(json) as M;
    }
    if (type == (CareGiversDetailData).toString()) {
      return CareGiversDetailData.fromJson(json) as M;
    }
    if (type == (CareGiversDetailDataGiver).toString()) {
      return CareGiversDetailDataGiver.fromJson(json) as M;
    }
    if (type == (CaresCustomerDetailEntity).toString()) {
      return CaresCustomerDetailEntity.fromJson(json) as M;
    }
    if (type == (CaresCustomerDetailData).toString()) {
      return CaresCustomerDetailData.fromJson(json) as M;
    }
    if (type == (CaresCustomerDetailDataGps).toString()) {
      return CaresCustomerDetailDataGps.fromJson(json) as M;
    }
    if (type == (CaresCustomerDetailDataGiver).toString()) {
      return CaresCustomerDetailDataGiver.fromJson(json) as M;
    }
    if (type == (CaresCustomerDetailDataEmergency).toString()) {
      return CaresCustomerDetailDataEmergency.fromJson(json) as M;
    }
    if (type == (CaresCustomerDetailDataAlert).toString()) {
      return CaresCustomerDetailDataAlert.fromJson(json) as M;
    }
    if (type == (CaresCustomerGiversEntity).toString()) {
      return CaresCustomerGiversEntity.fromJson(json) as M;
    }
    if (type == (CaresCustomerGiversData).toString()) {
      return CaresCustomerGiversData.fromJson(json) as M;
    }
    if (type == (CaresCustomerGiversDataGps).toString()) {
      return CaresCustomerGiversDataGps.fromJson(json) as M;
    }
    if (type == (CaresCustomerGiversDataGiver).toString()) {
      return CaresCustomerGiversDataGiver.fromJson(json) as M;
    }
    if (type == (CaresCustomerGiversDataEmergency).toString()) {
      return CaresCustomerGiversDataEmergency.fromJson(json) as M;
    }
    if (type == (CaresCustomerGiversDataAlert).toString()) {
      return CaresCustomerGiversDataAlert.fromJson(json) as M;
    }
    if (type == (CaresCustomerListEntity).toString()) {
      return CaresCustomerListEntity.fromJson(json) as M;
    }
    if (type == (CaresCustomerListData).toString()) {
      return CaresCustomerListData.fromJson(json) as M;
    }
    if (type == (CaresCustomerListDataGps).toString()) {
      return CaresCustomerListDataGps.fromJson(json) as M;
    }
    if (type == (CaresCustomerListDataGiver).toString()) {
      return CaresCustomerListDataGiver.fromJson(json) as M;
    }
    if (type == (CaresCustomerListDataAlert).toString()) {
      return CaresCustomerListDataAlert.fromJson(json) as M;
    }
    if (type == (CaresSwiperEntity).toString()) {
      return CaresSwiperEntity.fromJson(json) as M;
    }
    if (type == (CaresSwiperData).toString()) {
      return CaresSwiperData.fromJson(json) as M;
    }
    if (type == (CaresSwiperDataGiver).toString()) {
      return CaresSwiperDataGiver.fromJson(json) as M;
    }
    if (type == (CountryCodeEntity).toString()) {
      return CountryCodeEntity.fromJson(json) as M;
    }
    if (type == (CountryCodeData).toString()) {
      return CountryCodeData.fromJson(json) as M;
    }
    if (type == (CustomerAlertsDetailEntity).toString()) {
      return CustomerAlertsDetailEntity.fromJson(json) as M;
    }
    if (type == (CustomerAlertsDetailData).toString()) {
      return CustomerAlertsDetailData.fromJson(json) as M;
    }
    if (type == (CustomerAlertsDetailDataGps).toString()) {
      return CustomerAlertsDetailDataGps.fromJson(json) as M;
    }
    if (type == (CustomerAlertsDetailDataGiver).toString()) {
      return CustomerAlertsDetailDataGiver.fromJson(json) as M;
    }
    if (type == (CustomerAlertsDetailDataAlert).toString()) {
      return CustomerAlertsDetailDataAlert.fromJson(json) as M;
    }
    if (type == (CustomerAlertsEntity).toString()) {
      return CustomerAlertsEntity.fromJson(json) as M;
    }
    if (type == (CustomerAlertsData).toString()) {
      return CustomerAlertsData.fromJson(json) as M;
    }
    if (type == (CustomerAlertsDataGps).toString()) {
      return CustomerAlertsDataGps.fromJson(json) as M;
    }
    if (type == (CustomerAlertsDataGiver).toString()) {
      return CustomerAlertsDataGiver.fromJson(json) as M;
    }
    if (type == (CustomerDetailEntity).toString()) {
      return CustomerDetailEntity.fromJson(json) as M;
    }
    if (type == (CustomerDetailData).toString()) {
      return CustomerDetailData.fromJson(json) as M;
    }
    if (type == (CustomerDetailDataGps).toString()) {
      return CustomerDetailDataGps.fromJson(json) as M;
    }
    if (type == (CustomerDetailDataGiver).toString()) {
      return CustomerDetailDataGiver.fromJson(json) as M;
    }
    if (type == (CustomerInfoDetailEntity).toString()) {
      return CustomerInfoDetailEntity.fromJson(json) as M;
    }
    if (type == (CustomerInfoDetailData).toString()) {
      return CustomerInfoDetailData.fromJson(json) as M;
    }
    if (type == (CustomerInfoDetailDataGiver).toString()) {
      return CustomerInfoDetailDataGiver.fromJson(json) as M;
    }
    if (type == (CustomerListAllEntity).toString()) {
      return CustomerListAllEntity.fromJson(json) as M;
    }
    if (type == (CustomerListAllData).toString()) {
      return CustomerListAllData.fromJson(json) as M;
    }
    if (type == (CustomerListAllDataGps).toString()) {
      return CustomerListAllDataGps.fromJson(json) as M;
    }
    if (type == (CustomerListAllDataGiver).toString()) {
      return CustomerListAllDataGiver.fromJson(json) as M;
    }
    if (type == (CustomerListAllDataEmergency).toString()) {
      return CustomerListAllDataEmergency.fromJson(json) as M;
    }
    if (type == (CustomerListAllDataAlert).toString()) {
      return CustomerListAllDataAlert.fromJson(json) as M;
    }
    if (type == (CustomerListEntity).toString()) {
      return CustomerListEntity.fromJson(json) as M;
    }
    if (type == (CustomerListData).toString()) {
      return CustomerListData.fromJson(json) as M;
    }
    if (type == (CustomerListDataGps).toString()) {
      return CustomerListDataGps.fromJson(json) as M;
    }
    if (type == (CustomerListDataGiver).toString()) {
      return CustomerListDataGiver.fromJson(json) as M;
    }
    if (type == (CustomerListDataAlert).toString()) {
      return CustomerListDataAlert.fromJson(json) as M;
    }
    if (type == (LoginEntity).toString()) {
      return LoginEntity.fromJson(json) as M;
    }
    if (type == (LoginData).toString()) {
      return LoginData.fromJson(json) as M;
    }
    if (type == (MyCaresCustomerDetailEntity).toString()) {
      return MyCaresCustomerDetailEntity.fromJson(json) as M;
    }
    if (type == (MyCaresCustomerDetailData).toString()) {
      return MyCaresCustomerDetailData.fromJson(json) as M;
    }
    if (type == (MyCaresCustomerDetailDataGps).toString()) {
      return MyCaresCustomerDetailDataGps.fromJson(json) as M;
    }
    if (type == (MyCaresCustomerDetailDataGiver).toString()) {
      return MyCaresCustomerDetailDataGiver.fromJson(json) as M;
    }
    if (type == (MyCaresCustomerDetailDataEmergency).toString()) {
      return MyCaresCustomerDetailDataEmergency.fromJson(json) as M;
    }
    if (type == (MyCaresCustomerDetailDataAlert).toString()) {
      return MyCaresCustomerDetailDataAlert.fromJson(json) as M;
    }
    if (type == (MyEmergencyCallEntity).toString()) {
      return MyEmergencyCallEntity.fromJson(json) as M;
    }
    if (type == (MyEmergencyCallData).toString()) {
      return MyEmergencyCallData.fromJson(json) as M;
    }
    if (type == (MyUserEntity).toString()) {
      return MyUserEntity.fromJson(json) as M;
    }
    if (type == (MyUserData).toString()) {
      return MyUserData.fromJson(json) as M;
    }
    if (type == (MyUserDataUser).toString()) {
      return MyUserDataUser.fromJson(json) as M;
    }

    print("$type not found");

    return null;
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<CareGiversDetailEntity>[] is M) {
      return data
          .map<CareGiversDetailEntity>(
              (Map<String, dynamic> e) => CareGiversDetailEntity.fromJson(e))
          .toList() as M;
    }
    if (<CareGiversDetailData>[] is M) {
      return data
          .map<CareGiversDetailData>(
              (Map<String, dynamic> e) => CareGiversDetailData.fromJson(e))
          .toList() as M;
    }
    if (<CareGiversDetailDataGiver>[] is M) {
      return data
          .map<CareGiversDetailDataGiver>(
              (Map<String, dynamic> e) => CareGiversDetailDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerDetailEntity>[] is M) {
      return data
          .map<CaresCustomerDetailEntity>(
              (Map<String, dynamic> e) => CaresCustomerDetailEntity.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerDetailData>[] is M) {
      return data
          .map<CaresCustomerDetailData>(
              (Map<String, dynamic> e) => CaresCustomerDetailData.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerDetailDataGps>[] is M) {
      return data
          .map<CaresCustomerDetailDataGps>((Map<String, dynamic> e) =>
              CaresCustomerDetailDataGps.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerDetailDataGiver>[] is M) {
      return data
          .map<CaresCustomerDetailDataGiver>((Map<String, dynamic> e) =>
              CaresCustomerDetailDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerDetailDataEmergency>[] is M) {
      return data
          .map<CaresCustomerDetailDataEmergency>((Map<String, dynamic> e) =>
              CaresCustomerDetailDataEmergency.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerDetailDataAlert>[] is M) {
      return data
          .map<CaresCustomerDetailDataAlert>((Map<String, dynamic> e) =>
              CaresCustomerDetailDataAlert.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerGiversEntity>[] is M) {
      return data
          .map<CaresCustomerGiversEntity>(
              (Map<String, dynamic> e) => CaresCustomerGiversEntity.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerGiversData>[] is M) {
      return data
          .map<CaresCustomerGiversData>(
              (Map<String, dynamic> e) => CaresCustomerGiversData.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerGiversDataGps>[] is M) {
      return data
          .map<CaresCustomerGiversDataGps>((Map<String, dynamic> e) =>
              CaresCustomerGiversDataGps.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerGiversDataGiver>[] is M) {
      return data
          .map<CaresCustomerGiversDataGiver>((Map<String, dynamic> e) =>
              CaresCustomerGiversDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerGiversDataEmergency>[] is M) {
      return data
          .map<CaresCustomerGiversDataEmergency>((Map<String, dynamic> e) =>
              CaresCustomerGiversDataEmergency.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerGiversDataAlert>[] is M) {
      return data
          .map<CaresCustomerGiversDataAlert>((Map<String, dynamic> e) =>
              CaresCustomerGiversDataAlert.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerListEntity>[] is M) {
      return data
          .map<CaresCustomerListEntity>(
              (Map<String, dynamic> e) => CaresCustomerListEntity.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerListData>[] is M) {
      return data
          .map<CaresCustomerListData>(
              (Map<String, dynamic> e) => CaresCustomerListData.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerListDataGps>[] is M) {
      return data
          .map<CaresCustomerListDataGps>(
              (Map<String, dynamic> e) => CaresCustomerListDataGps.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerListDataGiver>[] is M) {
      return data
          .map<CaresCustomerListDataGiver>((Map<String, dynamic> e) =>
              CaresCustomerListDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CaresCustomerListDataAlert>[] is M) {
      return data
          .map<CaresCustomerListDataAlert>((Map<String, dynamic> e) =>
              CaresCustomerListDataAlert.fromJson(e))
          .toList() as M;
    }
    if (<CaresSwiperEntity>[] is M) {
      return data
          .map<CaresSwiperEntity>(
              (Map<String, dynamic> e) => CaresSwiperEntity.fromJson(e))
          .toList() as M;
    }
    if (<CaresSwiperData>[] is M) {
      return data
          .map<CaresSwiperData>(
              (Map<String, dynamic> e) => CaresSwiperData.fromJson(e))
          .toList() as M;
    }
    if (<CaresSwiperDataGiver>[] is M) {
      return data
          .map<CaresSwiperDataGiver>(
              (Map<String, dynamic> e) => CaresSwiperDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CountryCodeEntity>[] is M) {
      return data
          .map<CountryCodeEntity>(
              (Map<String, dynamic> e) => CountryCodeEntity.fromJson(e))
          .toList() as M;
    }
    if (<CountryCodeData>[] is M) {
      return data
          .map<CountryCodeData>(
              (Map<String, dynamic> e) => CountryCodeData.fromJson(e))
          .toList() as M;
    }
    if (<CustomerAlertsDetailEntity>[] is M) {
      return data
          .map<CustomerAlertsDetailEntity>((Map<String, dynamic> e) =>
              CustomerAlertsDetailEntity.fromJson(e))
          .toList() as M;
    }
    if (<CustomerAlertsDetailData>[] is M) {
      return data
          .map<CustomerAlertsDetailData>(
              (Map<String, dynamic> e) => CustomerAlertsDetailData.fromJson(e))
          .toList() as M;
    }
    if (<CustomerAlertsDetailDataGps>[] is M) {
      return data
          .map<CustomerAlertsDetailDataGps>((Map<String, dynamic> e) =>
              CustomerAlertsDetailDataGps.fromJson(e))
          .toList() as M;
    }
    if (<CustomerAlertsDetailDataGiver>[] is M) {
      return data
          .map<CustomerAlertsDetailDataGiver>((Map<String, dynamic> e) =>
              CustomerAlertsDetailDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CustomerAlertsDetailDataAlert>[] is M) {
      return data
          .map<CustomerAlertsDetailDataAlert>((Map<String, dynamic> e) =>
              CustomerAlertsDetailDataAlert.fromJson(e))
          .toList() as M;
    }
    if (<CustomerAlertsEntity>[] is M) {
      return data
          .map<CustomerAlertsEntity>(
              (Map<String, dynamic> e) => CustomerAlertsEntity.fromJson(e))
          .toList() as M;
    }
    if (<CustomerAlertsData>[] is M) {
      return data
          .map<CustomerAlertsData>(
              (Map<String, dynamic> e) => CustomerAlertsData.fromJson(e))
          .toList() as M;
    }
    if (<CustomerAlertsDataGps>[] is M) {
      return data
          .map<CustomerAlertsDataGps>(
              (Map<String, dynamic> e) => CustomerAlertsDataGps.fromJson(e))
          .toList() as M;
    }
    if (<CustomerAlertsDataGiver>[] is M) {
      return data
          .map<CustomerAlertsDataGiver>(
              (Map<String, dynamic> e) => CustomerAlertsDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CustomerDetailEntity>[] is M) {
      return data
          .map<CustomerDetailEntity>(
              (Map<String, dynamic> e) => CustomerDetailEntity.fromJson(e))
          .toList() as M;
    }
    if (<CustomerDetailData>[] is M) {
      return data
          .map<CustomerDetailData>(
              (Map<String, dynamic> e) => CustomerDetailData.fromJson(e))
          .toList() as M;
    }
    if (<CustomerDetailDataGps>[] is M) {
      return data
          .map<CustomerDetailDataGps>(
              (Map<String, dynamic> e) => CustomerDetailDataGps.fromJson(e))
          .toList() as M;
    }
    if (<CustomerDetailDataGiver>[] is M) {
      return data
          .map<CustomerDetailDataGiver>(
              (Map<String, dynamic> e) => CustomerDetailDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CustomerInfoDetailEntity>[] is M) {
      return data
          .map<CustomerInfoDetailEntity>(
              (Map<String, dynamic> e) => CustomerInfoDetailEntity.fromJson(e))
          .toList() as M;
    }
    if (<CustomerInfoDetailData>[] is M) {
      return data
          .map<CustomerInfoDetailData>(
              (Map<String, dynamic> e) => CustomerInfoDetailData.fromJson(e))
          .toList() as M;
    }
    if (<CustomerInfoDetailDataGiver>[] is M) {
      return data
          .map<CustomerInfoDetailDataGiver>((Map<String, dynamic> e) =>
              CustomerInfoDetailDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListAllEntity>[] is M) {
      return data
          .map<CustomerListAllEntity>(
              (Map<String, dynamic> e) => CustomerListAllEntity.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListAllData>[] is M) {
      return data
          .map<CustomerListAllData>(
              (Map<String, dynamic> e) => CustomerListAllData.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListAllDataGps>[] is M) {
      return data
          .map<CustomerListAllDataGps>(
              (Map<String, dynamic> e) => CustomerListAllDataGps.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListAllDataGiver>[] is M) {
      return data
          .map<CustomerListAllDataGiver>(
              (Map<String, dynamic> e) => CustomerListAllDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListAllDataEmergency>[] is M) {
      return data
          .map<CustomerListAllDataEmergency>((Map<String, dynamic> e) =>
              CustomerListAllDataEmergency.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListAllDataAlert>[] is M) {
      return data
          .map<CustomerListAllDataAlert>(
              (Map<String, dynamic> e) => CustomerListAllDataAlert.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListEntity>[] is M) {
      return data
          .map<CustomerListEntity>(
              (Map<String, dynamic> e) => CustomerListEntity.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListData>[] is M) {
      return data
          .map<CustomerListData>(
              (Map<String, dynamic> e) => CustomerListData.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListDataGps>[] is M) {
      return data
          .map<CustomerListDataGps>(
              (Map<String, dynamic> e) => CustomerListDataGps.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListDataGiver>[] is M) {
      return data
          .map<CustomerListDataGiver>(
              (Map<String, dynamic> e) => CustomerListDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<CustomerListDataAlert>[] is M) {
      return data
          .map<CustomerListDataAlert>(
              (Map<String, dynamic> e) => CustomerListDataAlert.fromJson(e))
          .toList() as M;
    }
    if (<LoginEntity>[] is M) {
      return data
          .map<LoginEntity>((Map<String, dynamic> e) => LoginEntity.fromJson(e))
          .toList() as M;
    }
    if (<LoginData>[] is M) {
      return data
          .map<LoginData>((Map<String, dynamic> e) => LoginData.fromJson(e))
          .toList() as M;
    }
    if (<MyCaresCustomerDetailEntity>[] is M) {
      return data
          .map<MyCaresCustomerDetailEntity>((Map<String, dynamic> e) =>
              MyCaresCustomerDetailEntity.fromJson(e))
          .toList() as M;
    }
    if (<MyCaresCustomerDetailData>[] is M) {
      return data
          .map<MyCaresCustomerDetailData>(
              (Map<String, dynamic> e) => MyCaresCustomerDetailData.fromJson(e))
          .toList() as M;
    }
    if (<MyCaresCustomerDetailDataGps>[] is M) {
      return data
          .map<MyCaresCustomerDetailDataGps>((Map<String, dynamic> e) =>
              MyCaresCustomerDetailDataGps.fromJson(e))
          .toList() as M;
    }
    if (<MyCaresCustomerDetailDataGiver>[] is M) {
      return data
          .map<MyCaresCustomerDetailDataGiver>((Map<String, dynamic> e) =>
              MyCaresCustomerDetailDataGiver.fromJson(e))
          .toList() as M;
    }
    if (<MyCaresCustomerDetailDataEmergency>[] is M) {
      return data
          .map<MyCaresCustomerDetailDataEmergency>((Map<String, dynamic> e) =>
              MyCaresCustomerDetailDataEmergency.fromJson(e))
          .toList() as M;
    }
    if (<MyCaresCustomerDetailDataAlert>[] is M) {
      return data
          .map<MyCaresCustomerDetailDataAlert>((Map<String, dynamic> e) =>
              MyCaresCustomerDetailDataAlert.fromJson(e))
          .toList() as M;
    }
    if (<MyEmergencyCallEntity>[] is M) {
      return data
          .map<MyEmergencyCallEntity>(
              (Map<String, dynamic> e) => MyEmergencyCallEntity.fromJson(e))
          .toList() as M;
    }
    if (<MyEmergencyCallData>[] is M) {
      return data
          .map<MyEmergencyCallData>(
              (Map<String, dynamic> e) => MyEmergencyCallData.fromJson(e))
          .toList() as M;
    }
    if (<MyUserEntity>[] is M) {
      return data
          .map<MyUserEntity>(
              (Map<String, dynamic> e) => MyUserEntity.fromJson(e))
          .toList() as M;
    }
    if (<MyUserData>[] is M) {
      return data
          .map<MyUserData>((Map<String, dynamic> e) => MyUserData.fromJson(e))
          .toList() as M;
    }
    if (<MyUserDataUser>[] is M) {
      return data
          .map<MyUserDataUser>(
              (Map<String, dynamic> e) => MyUserDataUser.fromJson(e))
          .toList() as M;
    }

    print("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json == null) {
      return null;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return _fromJsonSingle<M>(json as Map<String, dynamic>);
    }
  }
}
